"""
Функция any() проверяет объект, его содержимое, то есть пробегает по элементам.
При условии, что хотя бы один из элементов внутри объекта будет True,
функция вернёт нам True, в противном случае вернёт False.
"""

a = [True, False, False]
print(any(a))
a = [False, False, False]
print(any(a))
a = [True, True, True]
print(any(a))
a = [1, 0, 0]
print(any(a))
a = ['', "", 'True']
print(any(a))
a = ['', "", '']
print(any(a))
"""
Помимо функции any() есть ещё и функция aII(). 
По названию уже понятно, как она работает. 
Когда any() достаточно хотя бы одного элемента True, 
функции aII() нужны все элементы. Если все элементы True получаем True. 
Если хотя бы один элемент False - получаем False.
"""
a = [True, False, False]
print(all(a))
a = [False, False, False]
print(all(a))
a = [True, True, True]
print(all(a))

print()

a = [1, 1, 1]
b = ''

print(dir(a))  # Эта функция позволяет получить информацию об атрибутах объекта.
print(dir(b))
print(isinstance(a, str))
print(isinstance(b, str))   # Эта функция принимает объект для проверки
                            # и вторым - это класс, с которым будем сравнивать,
                            # то есть b и str. При запуске получаем True.
                            # То есть проверили, является ли b классом и получили
                            # в ответе True.
                            # В случае написания int вместо str - получим False


d = [1, 1, 1]
c = d
c[0] = 2
print(c)
print(d)
print(id(a))
print(id(d))
print(id(c))
print(c is d)


def helper():
    """
    Эта функция-помощник
    """
    pass


print(helper.__doc__)

"""
Давайте рассмотрим еще одну функцию, которая может помочь вам, если вы, 
допустим, забыли или нуждаетесь в помощи. Допустим забыли, 
как работать со списком. Воспользовались функцией Help(), 
передали туда список, получили информацию о содержимом данного класса, 
об атрибутах, методах и краткую документацию, подсказки.
"""
print(help(a))
